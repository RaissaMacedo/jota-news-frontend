{"ast":null,"code":"// src/services/api.js\nimport axios from 'axios';\nconst API_URL = 'http://localhost:8000/api';\nconst api = axios.create({\n  baseURL: API_URL\n});\n\n// Interceptador para adicionar o token em todas as requisições\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Interceptador para lidar com erros de resposta, especialmente 401\napi.interceptors.response.use(response => response, error => {\n  if (error.response && error.response.status === 401) {\n    console.error(\"Token expirado ou inválido. Faça login novamente.\");\n    localStorage.removeItem('token');\n    window.location.href = '/login'; // Redirecionar para login\n  }\n  return Promise.reject(error);\n});\n\n// Função para login\nexport const loginUser = async credentials => {\n  try {\n    const response = await api.post('/login', credentials);\n    const token = response.data.token; // ajuste conforme a estrutura da resposta\n    localStorage.setItem('token', token); // Armazenar o token\n    return response.data; // Retornar dados do usuário ou similar\n  } catch (error) {\n    console.error(\"Login failed\", error);\n    throw error; // Rejeitar a promise em caso de erro\n  }\n};\n\n// Função para registro\nexport const registerUser = async userData => {\n  try {\n    const response = await api.post('/register', userData);\n    return response.data; // Retornar dados do usuário ou similar\n  } catch (error) {\n    console.error(\"Registration failed\", error);\n    throw error; // Rejeitar a promise em caso de erro\n  }\n};\n\n// Função para obter todas as notícias\nexport const getNews = async () => {\n  try {\n    const response = await api.get('/news');\n    return response.data; // Retornar os dados da resposta\n  } catch (error) {\n    console.error(\"Failed to fetch news\", error);\n    throw error; // Rejeitar a promise em caso de erro\n  }\n};\n\n// Função para criar uma nova notícia\nexport const createNews = async newsData => {\n  try {\n    const response = await api.post('/news', newsData);\n    return response.data; // Retornar a nova notícia criada\n  } catch (error) {\n    console.error(\"Failed to create news\", error);\n    throw error; // Rejeitar a promise em caso de erro\n  }\n};\n\n// Função para atualizar uma notícia existente\nexport const updateNews = async (newsId, newsData) => {\n  try {\n    const response = await api.put(`/news/${newsId}`, newsData);\n    return response.data; // Retornar a notícia atualizada\n  } catch (error) {\n    console.error(\"Failed to update news\", error);\n    throw error; // Rejeitar a promise em caso de erro\n  }\n};\n\n// Função para excluir uma notícia\nexport const deleteNews = async newsId => {\n  try {\n    await api.delete(`/news/${newsId}`);\n    return; // Não é necessário retornar nada após exclusão bem-sucedida\n  } catch (error) {\n    console.error(\"Failed to delete news\", error);\n    throw error; // Rejeitar a promise em caso de erro\n  }\n};\n\n// Adicione outras funções conforme necessário","map":{"version":3,"names":["axios","API_URL","api","create","baseURL","interceptors","request","use","config","token","localStorage","getItem","headers","error","Promise","reject","response","status","console","removeItem","window","location","href","loginUser","credentials","post","data","setItem","registerUser","userData","getNews","get","createNews","newsData","updateNews","newsId","put","deleteNews","delete"],"sources":["/home/raissa/ssd/jota-news-frontend/src/services/api.js"],"sourcesContent":["// src/services/api.js\nimport axios from 'axios';\n\nconst API_URL = 'http://localhost:8000/api';\n\nconst api = axios.create({\n    baseURL: API_URL,\n});\n\n// Interceptador para adicionar o token em todas as requisições\napi.interceptors.request.use(\n    (config) => {\n        const token = localStorage.getItem('token');\n        if (token) {\n            config.headers['Authorization'] = `Bearer ${token}`;\n        }\n        return config;\n    },\n    (error) => {\n        return Promise.reject(error);\n    }\n);\n\n// Interceptador para lidar com erros de resposta, especialmente 401\napi.interceptors.response.use(\n    (response) => response,\n    (error) => {\n        if (error.response && error.response.status === 401) {\n            console.error(\"Token expirado ou inválido. Faça login novamente.\");\n            localStorage.removeItem('token');\n            window.location.href = '/login'; // Redirecionar para login\n        }\n        return Promise.reject(error);\n    }\n);\n\n// Função para login\nexport const loginUser = async (credentials) => {\n    try {\n        const response = await api.post('/login', credentials);\n        const token = response.data.token; // ajuste conforme a estrutura da resposta\n        localStorage.setItem('token', token); // Armazenar o token\n        return response.data; // Retornar dados do usuário ou similar\n    } catch (error) {\n        console.error(\"Login failed\", error);\n        throw error; // Rejeitar a promise em caso de erro\n    }\n};\n\n// Função para registro\nexport const registerUser = async (userData) => {\n    try {\n        const response = await api.post('/register', userData);\n        return response.data; // Retornar dados do usuário ou similar\n    } catch (error) {\n        console.error(\"Registration failed\", error);\n        throw error; // Rejeitar a promise em caso de erro\n    }\n};\n\n// Função para obter todas as notícias\nexport const getNews = async () => {\n    try {\n        const response = await api.get('/news');\n        return response.data; // Retornar os dados da resposta\n    } catch (error) {\n        console.error(\"Failed to fetch news\", error);\n        throw error; // Rejeitar a promise em caso de erro\n    }\n};\n\n// Função para criar uma nova notícia\nexport const createNews = async (newsData) => {\n    try {\n        const response = await api.post('/news', newsData);\n        return response.data; // Retornar a nova notícia criada\n    } catch (error) {\n        console.error(\"Failed to create news\", error);\n        throw error; // Rejeitar a promise em caso de erro\n    }\n};\n\n// Função para atualizar uma notícia existente\nexport const updateNews = async (newsId, newsData) => {\n    try {\n        const response = await api.put(`/news/${newsId}`, newsData);\n        return response.data; // Retornar a notícia atualizada\n    } catch (error) {\n        console.error(\"Failed to update news\", error);\n        throw error; // Rejeitar a promise em caso de erro\n    }\n};\n\n// Função para excluir uma notícia\nexport const deleteNews = async (newsId) => {\n    try {\n        await api.delete(`/news/${newsId}`);\n        return; // Não é necessário retornar nada após exclusão bem-sucedida\n    } catch (error) {\n        console.error(\"Failed to delete news\", error);\n        throw error; // Rejeitar a promise em caso de erro\n    }\n};\n\n// Adicione outras funções conforme necessário\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}